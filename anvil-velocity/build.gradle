plugins {
    id 'java'
}

jar.enabled = false // we only want shadowJar

repositories {
    maven { url 'https://libraries.minecraft.net/' }
    maven { url 'https://repo.velocitypowered.com/snapshots/' }
}

dependencies {
    if (rootProject.getName().equals("Anvil")) {
        implementation project(':anvil-api')
        implementation project(':anvil-common')
    } else {
        implementation project(':Anvil:anvil-api')
        implementation project(':Anvil:anvil-common')
    }

    implementation javasisst
    implementation(kotlin_reflect + ":" + kotlin_version)
    implementation(kotlin_stdlib + ":" + kotlin_version)
    implementation(kotlin_stdlib8 + ":" + kotlin_version)
    implementation kotlinx_coroutines
    implementation kotlinx_serialization
    implementation microutils_logging
    implementation mongo_java_driver
    implementation velocity
    annotationProcessor velocity
}

tasks.register("copyJars", Copy) {
    dependsOn(tasks.shadowJar)
    from(tasks.shadowJar)
    into("C:\\Users\\Allen\\Desktop\\Velocity\\plugins")
}

shadowJar {
    String jarName = "Anvil-Velocity-${project.version}.jar"
    println "Building: " + jarName
    archiveFileName = jarName

    dependencies {
        if (rootProject.getName().equals("Anvil")) {
            include project(':anvil-api')
            include project(':anvil-common')
        } else {
            include project(':Anvil:anvil-api')
            include project(':Anvil:anvil-common')
        }

        include dependency(apache_commons)
        include dependency(bson)
        include dependency(javasisst)
        include dependency(jedis)
        include dependency(kotlin_reflect)
        include dependency(kotlin_stdlib)
        include dependency(kotlin_stdlib8)
        include dependency(kotlinx_coroutines)
        include dependency(kotlinx_serialization)
        include dependency(microutils_logging)
        include dependency(mongo_java_driver)
        include dependency(mongodb_driver_sync)
        include dependency(morphia)
        include dependency(reflections)
        include dependency(xodus)
        include dependency(xodus_entity_store)
        include dependency(xodus_environment)
        include dependency(xodus_utils)
    }
}

artifacts {
    archives shadowJar
}
